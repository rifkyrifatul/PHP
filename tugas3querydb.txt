// Isi data table pelanggan minimal 6 data lagi
INSERT INTO `pelanggan` (`id`, `kode`, `nama`, `jk`, `tmp_lahir`, `tgl_lahir`, `email`, `kartu_id`) 
VALUES (NULL, 'c005', 'taupik', 'l', 'garut', '1985-0303', 'taupik@gmail.com', ''), 
(NULL, 'c006', 'arya', 'l', 'banjar', '1985-05-05', 'arya@gmail.com', ''), 
(NULL, 'c007', 'ani', 'p', 'bandung', '2001-01-03', 'ani@gmail.com', ''), 
(NULL, 'c008', 'ari', 'p', 'cimahi', '2002-09-06', 'ari@gmail.com', ''), 
(NULL, 'c009', 'aji', 'l', 'bandung', '2003-05-09', 'aji@gmail.com', ''), 
(NULL, 'c0010', 'ira', 'p', 'sukabumi', '2000-01-08', 'ira@gmail.com', ''
);


//Isi data table produk minimal 5 data lagi
INSERT INTO `produk` (`id`, `kode`, `nama`, `harga_beli`, `harga_jual`, `stok`, `min_stok`, `jenis_produk_id`) 
VALUES (NULL, 'r002', 'rak piring', '8000000', '1000000', '10', '3', '2'), 
(NULL, 'k003', 'kursi', '200000', '700000', '20', '10', '2'), 
(NULL, 'p005', 'pintu', '200000', '300000', '15', '9', '2'), 
(NULL, 'lcd200', 'layar lcd', '500000', '800000', '60', '20', '5'), 
(NULL, 'm2001', 'mouse', '100000', '150000', '40', '20', '5');


//Selesaikan worksheet 1 Tugas mandiri
1. Membuat table produk
CREATE TABLE produk( 
id int PRIMARY KEY AUTO_INCREMENT,
kode varchar (10) NOT null UNIQUE,
nama varchar (45) NOT null UNIQUE, 
harga_beli double NOT null, 
harga_jual double NOT null, 
stok int (11) not null,
min_stok int (11) not null,
jenis_produk_id int (11) not null REFERENCES jenis_produk(id)
);

2. Membuat table pesanan items 
CREATE TABLE pesanan_items(
    id int PRIMARY KEY AUTO_INCREMENT,
    produk_id int (11) NOT null REFERENCES produk (id),
    pesanan_id int (11) not null REFERENCES pesanan (id),
    qty int (11) NOT null,
    harga double 
    );

3. Membuat table vendor 
CREATE TABLE vendor(
    id int PRIMARY KEY AUTO_INCREMENT,
    nomor varchar (4),
    nama varchar (40),
    kota varchar (30),
    kontak varchar (30)
    );

4. Membuat table pembelian
CREATE TABLE pembelian(
    id int PRIMARY KEY AUTO_INCREMENT,
    tanggal date,
    nomor varchar (10) not null,
    produk_id int (11) NOT null REFERENCES produk (id),
    jumlah int (11) not null,
    harga double,
    vendor_id int (11) REFERENCES vendor (id)
    );


//Selesaikan worksheet 2 (2.2, 2.3, 2.4)
2.2
1.	Tampilkan data produk yang stoknya 3 dan 10
SELECT * from produk WHERE stok=3 OR stok=10;
2.	Tampilkan data produk yang harga jualnya kurang dari 5 juta tetapi lebih dari 500 ribu
SELECT * FROM produk WHERE harga_jual < 5000000 AND harga_jual > 500000;
3.	Tampilkan data produk yang harus segera ditambah stoknya
SELECT * FROM produk WHERE min_stok > stok;
4.	Tampilkan data pelanggan mulai dari yang paling muda
SELECT * FROM pelanggan ORDER BY tgl_lahir DESC;
5.	Tampilkan data pelanggan yang lahirnya di Jakarta dan gendernya perempuan
SELECT * FROM pelanggan WHERE tmp_lahir='jakarta' AND jk='P';
6.	Tampilkan data pelanggan yang ID nya 2, 4 dan 6
SELECT * from pelanggan WHERE id IN (2,4,6);
7.	Tampilkan data produk yang harganya antara 500 ribu sampai 6 juta
SELECT * FROM produk WHERE harga_jual >= 500000 AND harga_jual<= 6000000;
Mandiri

2.3
1.	Tampilkan produk yang kode awalnya huruf K dan huruf M
SELECT * FROM produk WHERE kode LIKE 'K%' OR kode LIKE 'M%';
2.	Tampilkan produk yang kode awalnya bukan huruf M
SELECT * FROM produk WHERE kode not LIKE 'M%';
3.	Tampilkan produk-produk televisi
SELECT * FROM produk WHERE nama LIKE 'Tel%';
4.	Tampilkan pelanggan mengandung huruf 'SA'
SELECT * from pelanggan WHERE nama LIKE '%SA%';
5.	Tampilkan pelanggan yang lahirnya bukan di Jakarta dan mengandung huruf ‘yo‘
SELECT * from pelanggan WHERE tmp_lahir <> 'jakarta' AND nama LIKE '%SA%';
6.	Tampilkan pelanggan yang karakter huruf ke – 2 nya adalah A
SELECT * from pelanggan WHERE substring(nama, 2, 1) = 'a';

2.4
1.	Tampilkan 2 data produk termahal
SELECT *FROM produk ORDER BY harga_beli DESC LIMIT 2;
2.	Tampilkan produk yang paling murah
SELECT * FROM `produk` WHERE harga_beli = (SELECT MIN(harga_beli) FROM produk);
3.	Tampilkan produk yang stoknya paling banyak
SELECT * FROM `produk` WHERE stok = (SELECT MAX(stok) FROM produk);
4.	Tampilkan dua produk yang stoknya paling sedikit
SELECT *FROM produk ORDER BY stok ASC LIMIT 2;
5.	Tampilkan pelanggan yang paling muda
SELECT * FROM `pelanggan` WHERE tgl_lahir=(SELECT max(tgl_lahir) FROM pelanggan);
6.	Tampilkan pelanggan yang paling tua
SELECT * FROM `pelanggan` WHERE tgl_lahir=(SELECT min(tgl_lahir) FROM pelanggan);